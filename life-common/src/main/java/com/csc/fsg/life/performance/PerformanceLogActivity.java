package com.csc.fsg.life.performance;

import java.io.Serializable;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;

import com.csc.fsg.life.dbutils.UniqueNumberGenerator;
import com.csc.fsg.life.performance.PerformanceLogSegment.SegmentType;

/* Modifications: T0166, T0199 */

/**
 * This class is an abstraction of a performance log activity. It is composed
 * of:
 * <ul>
 * <li>Identification of the user and environment, from which the activity has
 * originated</li>
 * <li>A list of segments, each reflecting a measurement of performance at one
 * of steps comprising the activity</li>
 * <li>A mechanism to create new segments of various types</li>
 * <li>A mechanism providing interaction with a service used to persist a
 * performance log activity along with all its segments</li>
 * </ul>
 */
public class PerformanceLogActivity
	implements Serializable
{
	private static final long serialVersionUID = 4099357352137399460L;

	protected static final int INITIAL_SEQUENCE_NO = 1;

	private String userId = null;
	private String environment = null;
	private String remoteAddress = "";
	private int remotePort = -1;
	private long activityId = -1L;
	private LinkedList<PerformanceLogSegment> activitySegments = null;

	private int nextSequenceNo = -1;
	private int logBookmark = -1;

	public PerformanceLogActivity(String userId, String environment)
	{
		this.userId = userId;
		this.environment = environment;
		nextSequenceNo = INITIAL_SEQUENCE_NO;
		activityId = UniqueNumberGenerator.getUniqueLongNumber();
		activitySegments = new LinkedList<PerformanceLogSegment>();
	}

	public PerformanceLogActivity(String userId, String environment, String remoteAddress, int remotePort)
	{
		this(userId, environment);
		this.remoteAddress = remoteAddress;
		this.remotePort = remotePort;
	}

	/**
	 * Create a new activity segment initialized to support performance data
	 * gathered by an interceptor at the service method level. Add the segment
	 * to the internal segment list, and return a reference to the caller.
	 * 
	 * @param origin
	 *        Encapsulated information aout location of the corresponding
	 *        measurement
	 * @return The new performance log segment
	 */
	public PerformanceLogSegment createServiceSegment(PerformanceLogSegmentOrigin origin)
	{
		PerformanceLogSegment newSegment = new PerformanceLogSegment(SegmentType.SERVICE_INTERCEPTOR, nextSequenceNo, origin);
		addSegment(newSegment);
		return newSegment;
	}

	/**
	 * Create a new activity segment initialized to support performance data
	 * gathered by an interceptor at the JDBC-based DAO level. Add the segment
	 * to the internal segment list, and return a reference to the caller.
	 * 
	 * @param statementName
	 *        Id of the Mapper used for the corresponding JDBC access
	 * @param sqlQuery
	 *        The SQL statement generated by the framework from the Mapper
	 *        indicated by <code>statementName</code>
	 * @return The new performance log segment
	 */
	public PerformanceLogSegment createJdbcSegment(String statementName, String sqlQuery)
	{
		return createJdbcSegment(statementName, sqlQuery, false);
	}

	/**
	 * Create a new activity segment initialized to support performance data
	 * gathered by an interceptor at the JDBC-based DAO level, which could
	 * optionally be a batch JDBC. Add the segment to the internal segment list,
	 * and return a reference to the caller.
	 * 
	 * @param statementName
	 *        Id of the Mapper used for the corresponding JDBC access
	 * @param sqlQuery
	 *        The SQL statement generated by the framework from the Mapper
	 *        indicated by <code>statementName</code>
	 * @param isBatch
	 *        A flag indicating whether the JDBC access is part of a batch
	 *        operation
	 * @return The new performance log segment
	 */
	public PerformanceLogSegment createJdbcSegment(String statementName, String sqlQuery, boolean isBatch)
	{
		String batchInd = "";
		if (isBatch)
			batchInd = " Batch";

		PerformanceLogSegmentOrigin origin = new PerformanceLogSegmentOrigin("JDBC Access" + batchInd, "MyBatis", statementName);
		PerformanceLogSegment newSegment = new PerformanceLogSegment(SegmentType.SERVICE_JDBC, nextSequenceNo, origin, sqlQuery);
		addSegment(newSegment);
		return newSegment;
	}

	/**
	 * Create a new activity segment initialized to support performance data
	 * gathered by an interceptor at the Service Manager event level. Add the
	 * segment to the internal segment list, and return a reference to the
	 * caller.
	 * 
	 * @param eventId
	 *        Event Id used for the Service Manager event
	 * @param messageKey
	 *        The key value used to store the copybook image used to exchange
	 *        Service Manager event parameter values, in table XGREPOS
	 * @return The new performance log segment
	 */
	public PerformanceLogSegment createServiceManagerSegment(String eventId, String messageKey)
	{
		PerformanceLogSegmentOrigin origin = new PerformanceLogSegmentOrigin("Service Manager Event", messageKey, eventId);
		PerformanceLogSegment newSegment = new PerformanceLogSegment(SegmentType.SERVICE_MANAGER, nextSequenceNo, origin);
		addSegment(newSegment);
		return newSegment;
	}

	/**
	 * Create a new place holder activity segment initialized to indicate
	 * performance data captured in COBOL.
	 * 
	 * @return The new performance log segment
	 */
	public PerformanceLogSegment createExternalSegment()
	{
		PerformanceLogSegmentOrigin origin = new PerformanceLogSegmentOrigin("COBOL Module", "COBOL Module", "COBOL Routine");
		PerformanceLogSegment newSegment = new PerformanceLogSegment(SegmentType.SERVICE_EXTERNAL, nextSequenceNo, origin);
		addSegment(newSegment);
		return newSegment;
	}

	/**
	 * Add the provided <code>segment</code> to the internal list of performance
	 * log activity segments.
	 * 
	 * @param segment
	 *        The activity log segment to be added to the list.
	 */
	protected void addSegment(PerformanceLogSegment segment)
	{
		activitySegments.add(segment);
		nextSequenceNo++;
	}

	public int getNextSequenceNo()
	{
		return nextSequenceNo;
	}

	public int getNextSequenceNoAdjustment(int adjustedSequenceNo)
	{
		if (adjustedSequenceNo < nextSequenceNo)
			return 0;
		else
			return adjustedSequenceNo - nextSequenceNo;
	}

	public String getUserId()
	{
		return userId;
	}

	public String getEnvironment()
	{
		return environment;
	}

	public String getRemoteAddress()
	{
		return remoteAddress;
	}

	public int getRemotePort()
	{
		return remotePort;
	}

	/**
	 * Return value of Activity Id formatted as a fixed-length hexadecimal
	 * number.
	 * 
	 * @return Formatted value of Activity Id corresponding to the activity
	 *         represented by this object.
	 */
	public String getActivityId()
	{
		StringBuilder buf = new StringBuilder(Long.toHexString(activityId));
		while (buf.length() < 16)
			buf.insert(0, '0');

		return buf.toString().toUpperCase();
	}

	/**
	 * This method creates a bookmark following the current last element of the
	 * performance log segment list.
	 */
	public void bookmarkLogLocation()
	{
		logBookmark = nextSequenceNo;
	}

	/**
	 * Return a flag indicating whether any segments exist in this instance of
	 * performance log activity.
	 * 
	 * @return A flag indicating whether any segments exist in this instance of
	 *         performance log activity.
	 */
	public boolean isEmpty()
	{
		return activitySegments.isEmpty();
	}

	/**
	 * Return a flag indicating whether the supplied <code>segment</code>
	 * instance is head of the internal performance log segment list.
	 * 
	 * @return A flag indicating whether the supplied <code>segment</code>
	 *         instance is the first element in the segment list.
	 */
	public boolean isFirstSegment(PerformanceLogSegment segment)
	{
		return !isEmpty() && segment == activitySegments.getFirst();
	}

	/**
	 * Return the list of all performance log segments, wrapped in a
	 * unmodifieble list to make the list itself immutable.
	 * 
	 * @return The list of all performance log segments.
	 */
	public List<PerformanceLogSegment> getSegments()
	{
		return Collections.unmodifiableList(activitySegments);
	}

	/**
	 * Return the list of performance log segments starting at the bookmarked
	 * location, wrapped in a unmodifieble list to make the list itself
	 * immutable.
	 * 
	 * @return The list of performance log segments starting at the bookmarked
	 *         location.
	 */
	public List<PerformanceLogSegment> getSegmentsForLogging()
	{
		if (logBookmark < INITIAL_SEQUENCE_NO)
			return getSegments();

		int firstIdx = logBookmark - 1;
		int lastIdx = activitySegments.size();

		List<PerformanceLogSegment> segmentsForLogging = activitySegments.subList(firstIdx, lastIdx);
		return Collections.unmodifiableList(segmentsForLogging);
	}
}
